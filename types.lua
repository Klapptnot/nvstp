-- Util aliases
---@alias AnyIndex number @ Use it to access any index in other aliases
---@alias AnyField any @ Use it to access any arbitrary fields
---@diagnostic disable-next-line: undefined-doc-name
---@alias Null table<AnyField, NullType> @ Use it to deny any arbitrary values aside from the requested ones
---@alias some number|string|boolean|table|function|thread|userdata

-- Valid types for items in a list
---@alias DataType
---| "number"
---| "number?"
---| "string"
---| "string?"
---| "boolean"
---| "boolean?"
---| "table"
---| "table?"
---| "function"
---| "function?"
---| "thread"
---| "thread?"
---| "userdata"
---| "userdata?"
---|>"some" @ Any value but nil

-- The error message format string
---@alias ArgErrMsg string
-- Default argument value (Has not type check)
---@alias ArgDefVal any
-- Argument expected type (or a list of)
---@alias ArgValType DataType[] | DataType
-- List of expected values for argument
---@alias ArgExpValues any[]
-- A argument scheme entry
---@alias ArgScheme DataType|{[1]:ArgValType, from:ArgExpValues?, type_err:ArgErrMsg?, value_err:ArgErrMsg?, def:ArgDefVal?}
-- List item scheme
---@alias ItemScheme DataType|{[1]:ArgValType, from:ArgExpValues?, type_err:ArgErrMsg?, value_err:ArgErrMsg?}
-- List of argument schemes
---@alias ArgParseScheme {[AnyIndex]:ArgScheme, type_err:ArgErrMsg?, value_err:ArgErrMsg?, sep:string?}
-- List of item schemes
---@alias ListScheme {[AnyIndex]:ItemScheme, type_err:ArgErrMsg?, value_err:ArgErrMsg?, sep:string?}

---@alias NvstpKeyMap {mapp:string, mode:string[], exec:fun()|string, desc:string?, opts:vim.api.keyset.keymap?}
