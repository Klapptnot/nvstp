local __opts__ = { expr = false }
-- All possible LSP mappings with window behavior indicators
return {
  {
    meth = "textDocument/codeAction",
    mapp = "<C-.>",
    mode = { "n", "i" },
    exec = vim.lsp.buf.code_action,
    desc = "[LSP][P] Get code actions",
    opts = __opts__,
  },
  {
    meth = "textDocument/declaration",
    mapp = "gD",
    mode = { "n" },
    exec = vim.lsp.buf.declaration,
    desc = "[LSP] Goto to declaration",
    opts = __opts__,
  },
  {
    meth = "textDocument/definition",
    mapp = "gd",
    mode = { "n" },
    exec = vim.lsp.buf.definition,
    desc = "[LSP] Goto to definition",
    opts = __opts__,
  },
  {
    meth = "textDocument/implementation",
    mapp = "gi",
    mode = { "n" },
    exec = vim.lsp.buf.implementation,
    desc = "[LSP] Goto to implementation",
    opts = __opts__,
  },
  {
    meth = "textDocument/typeDefinition",
    mapp = "gy",
    mode = { "n" },
    exec = vim.lsp.buf.type_definition,
    desc = "[LSP] Goto to type definition",
    opts = __opts__,
  },
  {
    meth = "textDocument/references",
    mapp = "gr",
    mode = { "n" },
    exec = vim.lsp.buf.references,
    desc = "[LSP][W] Show references",
    opts = __opts__,
  },
  {
    meth = "textDocument/signatureHelp",
    mapp = "<C-k>",
    mode = { "n", "i" },
    exec = vim.lsp.buf.signature_help,
    desc = "[LSP][W] Show signature help",
    opts = __opts__,
  },
  {
    meth = "textDocument/documentSymbol",
    mapp = "<leader>ds",
    mode = { "n" },
    exec = vim.lsp.buf.document_symbol,
    desc = "[LSP][W] Show document symbols",
    opts = __opts__,
  },
  {
    meth = "workspace/symbol",
    mapp = "<leader>ws",
    mode = { "n" },
    exec = vim.lsp.buf.workspace_symbol,
    desc = "[LSP][W] Show workspace symbols",
    opts = __opts__,
  },
  {
    meth = "textDocument/hover",
    mapp = "K",
    mode = { "n" },
    exec = function() vim.lsp.buf.hover({ border = "rounded" }) end,
    desc = "[LSP][W] Show hover documentation",
    opts = __opts__,
  },
  {
    meth = "textDocument/formatting",
    mapp = "<leader>lf",
    mode = { "n", "v" },
    exec = function() vim.lsp.buf.format({ async = true }) end,
    desc = "[LSP][S] Format document or selection",
    opts = __opts__,
  },
  {
    meth = "textDocument/rename",
    mapp = "<F2>",
    mode = { "n", "i", "v" },
    exec = vim.lsp.buf.rename,
    desc = "[LSP][W] Rename symbol",
    opts = __opts__,
  },
  {
    meth = "textDocument/documentHighlight",
    mapp = "<leader>hl",
    mode = { "n" },
    exec = vim.lsp.buf.document_highlight,
    desc = "[LSP][S] Highlight references",
    opts = __opts__,
  },
  {
    meth = "textDocument/clearDocumentHighlight",
    mapp = "<leader>hc",
    mode = { "n" },
    exec = vim.lsp.buf.clear_references,
    desc = "[LSP][S] Clear reference highlights",
    opts = __opts__,
  },
  {
    meth = "callHierarchy/incomingCalls",
    mapp = "<leader>li",
    mode = { "n" },
    exec = vim.lsp.buf.incoming_calls,
    desc = "[LSP][W] Show incoming calls",
    opts = __opts__,
  },
  {
    meth = "callHierarchy/outgoingCalls",
    mapp = "<leader>lo",
    mode = { "n" },
    exec = vim.lsp.buf.outgoing_calls,
    desc = "[LSP][W] Show outgoing calls",
    opts = __opts__,
  },
  {
    meth = "workspace/addFolder",
    mapp = "<leader>wa",
    mode = { "n" },
    exec = vim.lsp.buf.add_workspace_folder,
    desc = "[LSP][S] Add workspace folder",
    opts = __opts__,
  },
  {
    meth = "workspace/removeFolder",
    mapp = "<leader>wr",
    mode = { "n" },
    exec = vim.lsp.buf.remove_workspace_folder,
    desc = "[LSP][S] Remove workspace folder",
    opts = __opts__,
  },
  {
    meth = "workspace/listFolders",
    mapp = "<leader>wl",
    mode = { "n" },
    exec = vim.lsp.buf.list_workspace_folders,
    desc = "[LSP][W] List workspace folders",
    opts = __opts__,
  },
  {
    meth = "textDocument/publishDiagnostics",
    mapp = "<leader>le",
    mode = { "n" },
    exec = function() vim.diagnostic.open_float() end,
    desc = "[LSP][W] Show line diagnostics",
    opts = __opts__,
  },
  {
    meth = "textDocument/publishDiagnostics",
    mapp = "[d",
    mode = { "n" },
    exec = function() vim.diagnostic.jump({ count = -vim.v.count1, wrap = true }) end,
    desc = "[LSP][S] Go to previous diagnostic",
    opts = __opts__,
  },
  {
    meth = "textDocument/publishDiagnostics",
    mapp = "]d",
    mode = { "n" },
    exec = function() vim.diagnostic.jump({ count = vim.v.count1, wrap = true }) end,
    desc = "[LSP][S] Go to next diagnostic",
    opts = __opts__,
  },
  {
    meth = "textDocument/publishDiagnostics",
    mapp = "<leader>df",
    mode = { "n" },
    exec = vim.diagnostic.setqflist,
    desc = "[LSP][W] Show all diagnostics",
    opts = __opts__,
  },
  {
    meth = "textDocument/publishDiagnostics",
    mapp = "<leader>q",
    mode = { "n" },
    exec = function() vim.diagnostic.setloclist() end,
    desc = "[LSP][W] Add diagnostics to location list",
    opts = __opts__,
  },
  {
    meth = "typeHierarchy",
    mapp = "<leader>th",
    mode = { "n" },
    exec = vim.lsp.buf.typehierarchy,
    desc = "[LSP][W] Show type hierarchy",
    opts = __opts__,
  },
}
